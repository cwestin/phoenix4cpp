#!/usr/bin/python
# Copyright (c) 2011 by Chris Westin.  All Rights Reserved.
# See LICENSE.txt

import os
import re

# keep around some compiled regular expressions we're use repeatedly
filebasere = re.compile('(?P<filebase>.*)\\.cpp$')
includere = re.compile('^#\\s*include\\s*"(?P<incfile>.*)"')


def writeobjdeps(makefilefd, filebase):
    srcname = 'src/' + filebase + '.cpp'
    srcfd = open(srcname)
    if (srcfd is None):
        print 'cannot open %s' % srcname
        return

    # the object file depends on the source file
    objname = 'obj/' + filebase + '.o'
    makefilefd.write('%s:\t%s' % (objname, srcname))

    for srcline in srcfd:
        mo = includere.search(srcline)
        if (mo is None):
            continue
        incfile = mo.group('incfile')
        if (incfile is None):
            continue
        # the object also depends on this include file
        makefilefd.write(' include/%s' % incfile)

    # end the dependency list
    makefilefd.write('\n')

    # write the rule
    makefilefd.write('\t$(CC) $(CFLAGS) -c -o %s %s\n' % (objname, srcname))
    makefilefd.write('\t$(AR) $(ARFLAGS) lib/$(LIBRARY) $<\n')
    makefilefd.write('\n')

    srcfd.close()


def visitsrcdir(makefilefd):
    names = os.listdir('src')
    if (names is None) or (len(names) == 0):
        return

    filebases = []
    makefilefd.write('OBJECTS =')
    for srcfilename in names:
        mo = filebasere.search(srcfilename)
        # if we found a file that isn't a source file, alert the user
        if (mo is None):
            # don't report on emacs backup files
            if (srcfilename[-1] == '~'):
                continue
            print '%s is not a source file name' % srcfilename
            return
        filebase = mo.group('filebase')
        if (filebase is None):
            print '%s is not a source file name' % srcfilename
            return
    
        filebases.append(filebase)
        makefilefd.write(' obj/%s.o' % filebase)

    # end the OBJECTS list
    makefilefd.write('\n\n')

    # the rule to build the library
    makefilefd.write('lib/phoenix4cpp.a:\t$(OBJECTS)\n')
    makefilefd.write('\n')

    # clean
    makefilefd.write('clean:\n')
    makefilefd.write('\trm src/*~ obj/*.o lib/*.a\n')
    makefilefd.write('\n')

    # add the individual files' dependencies
    for srcbase in filebases:
        writeobjdeps(makefilefd, srcbase)


if __name__ == '__main__':
    # create the makefile
    makefilefd = open('Makefile', 'w')

    cwd = os.getcwd()

    # standard preamble
    makefilefd.write('# Makefile generated by makemake\n')
    makefilefd.write('\n')
    makefilefd.write('CC = g++\n')
    makefilefd.write('INCLUDE = %s/include/\n' % cwd)
    makefilefd.write('CFLAGS = -Wall -I$(INCLUDE) -ggdb\n')
    makefilefd.write('\n')

    makefilefd.write('AR = ar\n')
    makefilefd.write('ARFLAGS = -rsc\n')
    makefilefd.write('LIBRARY = phoenix4cpp.a')
    makefilefd.write('\n')

    visitsrcdir(makefilefd)
    makefilefd.close()
    pass
